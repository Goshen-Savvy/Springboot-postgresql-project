package com.anne.savvy.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.anne.savvy.exception.ResourceNotFoundException;
import com.anne.savvy.model.Ideation;
import com.anne.savvy.repository.IdeationRepository;

@RestController
@RequestMapping("/api/v1/")
public class IdeationController {
	
	@Autowired
	private IdeationRepository ideationRepository;
	
	//get ideation
	@GetMapping("ideation")
	public List<Ideation> getAllIdeation(){
		return this.ideationRepository.findAll();
	}
	
	
	//get ideation by id
	
    @GetMapping("/ideation/{id}")
    public ResponseEntity<Ideation> getIdeationId(@PathVariable(value = "id") Long ideationId)
        throws ResourceNotFoundException {
        Ideation ideation = ideationRepository.findById(ideationId)
          .orElseThrow(() -> new ResourceNotFoundException("Employee not found for this id :: " + ideationId));
        return ResponseEntity.ok().body(ideation);
    }
    
    @PostMapping("/employees")
    public Employee createEmployee(@Valid @RequestBody Employee employee) {
        return employeeRepository.save(employee);
    }

    @PutMapping("/employees/{id}")
    public ResponseEntity<Employee> updateEmployee(@PathVariable(value = "id") Long employeeId,
         @Valid @RequestBody Employee employeeDetails) throws ResourceNotFoundException {
        Employee employee = employeeRepository.findById(employeeId)
        .orElseThrow(() -> new ResourceNotFoundException("Employee not found for this id :: " + employeeId));

        employee.setEmailId(employeeDetails.getEmailId());
        employee.setLastName(employeeDetails.getLastName());
        employee.setFirstName(employeeDetails.getFirstName());
        final Employee updatedEmployee = employeeRepository.save(employee);
        return ResponseEntity.ok(updatedEmployee);
    }

    @DeleteMapping("/employees/{id}")
    public Map<String, Boolean> deleteEmployee(@PathVariable(value = "id") Long employeeId)
         throws ResourceNotFoundException {
        Employee employee = employeeRepository.findById(employeeId)
       .orElseThrow(() -> new ResourceNotFoundException("Employee not found for this id :: " + employeeId));

        employeeRepository.delete(employee);
        Map<String, Boolean> response = new HashMap<>();
        response.put("deleted", Boolean.TRUE);
        return response;
    }
	//save ideation
	//update ideation
	//delete ideation

}
